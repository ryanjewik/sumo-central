services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 10

  airflow-webserver:
    build: .
    image: my-airflow-spark:3.1.0
    user: "0"
    command: api-server
    ports:
      - "8081:8080"
    environment:
      # --- Core (LocalExecutor + Postgres) ---
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow

      # --- Auth (FAB) ---
      AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      AIRFLOW__WEBSERVER__AUTHENTICATE: "True"
      SPARK_HOME: /opt/spark
      # (optional) ensure PySpark uses python3
      PYSPARK_PYTHON: python3
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - airflow_data:/opt/airflow

  airflow-scheduler:
    image: my-airflow-spark:3.1.0
    user: "0"
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      PYSPARK_PYTHON: python3
      SPARK_HOME: /opt/spark

    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - airflow_data:/opt/airflow

  airflow-dag-processor:
    image: my-airflow-spark:3.1.0
    user: "0"
    command: dag-processor
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      PYSPARK_PYTHON: python3
      SPARK_HOME: /opt/spark

    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - airflow_data:/opt/airflow

volumes:
  airflow_data:
  pg_data:
